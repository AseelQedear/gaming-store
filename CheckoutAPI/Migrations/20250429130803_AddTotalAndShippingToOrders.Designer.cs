// <auto-generated />
using System;
using CheckoutAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CheckoutAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250429130803_AddTotalAndShippingToOrders")]
    partial class AddTotalAndShippingToOrders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("CheckoutAPI.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Available")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("BestDeal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Discounted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Offer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("TEXT");

                    b.Property<double>("Percent")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            BestDeal = false,
                            Discounted = true,
                            Image = "/media/steamdeck.png",
                            Name = "Steam Deck OLED 512GB",
                            Offer = "Free shipping + 200 games",
                            OldPrice = 2799m,
                            Percent = 7.1500000000000004,
                            Price = 2599m,
                            Specifications = "[\"7.4” HDR OLED display, 1280x800 resolution, up to 90Hz\",\"AMD APU: Zen 2 4-core, RDNA 2 GPU with 8 CUs\",\"16GB LPDDR5 RAM (6400 MT/s)\",\"512GB NVMe SSD\",\"Wi-Fi 6E, Bluetooth 5.3\",\"50Whr battery, 3–12 hours of gameplay\",\"Dual ambient light sensors\",\"SteamOS 3.0\"]",
                            Type = "Steam Deck"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            BestDeal = false,
                            Discounted = true,
                            Image = "/media/steamdeck.png",
                            Name = "Steam Deck 1TB Limited Edition",
                            Offer = "Exclusive colorway + travel case",
                            OldPrice = 3149m,
                            Percent = 7.9500000000000002,
                            Price = 2899m,
                            Specifications = "[\"7.4” HDR OLED screen, etched anti-glare glass\",\"AMD APU: Zen 2 4-core, RDNA 2 GPU with 8 CUs\",\"16GB LPDDR5 RAM (6400 MT/s)\",\"1TB NVMe SSD\",\"Wi-Fi 6E, Bluetooth 5.3\",\"50Whr battery\",\"Custom startup movie and virtual theme\",\"SteamOS 3.0\"]",
                            Type = "Steam Deck"
                        },
                        new
                        {
                            Id = 3,
                            Available = false,
                            BestDeal = false,
                            Discounted = false,
                            Image = "/media/rogallywhite.png",
                            Name = "ROG Ally 1TB Z1 Extreme",
                            Offer = "Free shipping + Meta+ subscription",
                            OldPrice = 2799m,
                            Percent = 14.289999999999999,
                            Price = 2399m,
                            Specifications = "[\"7” FHD 1080p IPS touchscreen, 120Hz refresh rate\",\"AMD Ryzen Z1 Extreme, 8-core/16-thread, 12 RDNA 3 CUs\",\"16GB LPDDR5 RAM (6400 MT/s)\",\"1TB PCIe 4.0 SSD\",\"Wi-Fi 6E, Bluetooth 5.2\",\"Windows 11 Home\",\"ROG Armoury Crate SE\",\"Support for XG Mobile eGPU\"]",
                            Type = "ROG Ally"
                        },
                        new
                        {
                            Id = 4,
                            Available = false,
                            BestDeal = false,
                            Discounted = false,
                            Image = "/media/rogallyblack.png",
                            Name = "ROG Ally 512GB Z1 Non-Extreme",
                            Offer = "Budget-friendly bundle with charger",
                            OldPrice = 2199m,
                            Percent = 9.0999999999999996,
                            Price = 1999m,
                            Specifications = "[\"7” FHD 1080p IPS touchscreen, 120Hz refresh rate\",\"AMD Ryzen Z1, 6-core/12-thread, 4 RDNA 3 CUs\",\"16GB LPDDR5 RAM (6400 MT/s)\",\"512GB PCIe 4.0 SSD\",\"Wi-Fi 6E, Bluetooth 5.2\",\"Windows 11 Home\",\"Adaptive Cooling System\",\"Support for XG Mobile\"]",
                            Type = "ROG Ally"
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            BestDeal = false,
                            Discounted = true,
                            Image = "/media/lenovogo.png",
                            Name = "Legion Go 1TB",
                            Offer = "3 Months Xbox Game Pass + 200 Games",
                            OldPrice = 2899m,
                            Percent = 10.35,
                            Price = 2599m,
                            Specifications = "[\"8.8” WQXGA (2560 x 1600) IPS touchscreen, 144Hz\",\"AMD Ryzen Z1 Extreme, 8-core/16-thread, RDNA 3\",\"16GB LPDDR5X RAM (7500 MT/s)\",\"1TB PCIe 4.0 SSD\",\"Wi-Fi 6E, Bluetooth 5.2\",\"Windows 11 Home\",\"Detachable Hall Effect controllers\",\"49.2Whr battery with fast charge\"]",
                            Type = "Lenovo Go"
                        },
                        new
                        {
                            Id = 6,
                            Available = false,
                            BestDeal = false,
                            Discounted = false,
                            Image = "/media/msiclaw.png",
                            Name = "MSI Claw 128GB",
                            Offer = "Get Asgard’s Wrath 2 with purchase",
                            OldPrice = 2399m,
                            Percent = 12.51,
                            Price = 2099m,
                            Specifications = "[\"7” FHD (1920 x 1080) IPS touchscreen, 120Hz\",\"Intel Core Ultra 5 135H, Intel Arc GPU\",\"16GB LPDDR5 RAM\",\"128GB PCIe Gen 4 SSD\",\"Wi-Fi 7, Bluetooth 5.4\",\"Windows 11 Home\",\"53Whr battery, Cooler Boost\",\"Hall Effect triggers and sticks\"]",
                            Type = "MSI Claw"
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            BestDeal = false,
                            Discounted = true,
                            Image = "/media/msiclaw.png",
                            Name = "MSI Claw 512GB",
                            Offer = "Includes exclusive MSI travel pouch",
                            OldPrice = 2699m,
                            Percent = 7.4100000000000001,
                            Price = 2499m,
                            Specifications = "[\"7” FHD (1920 x 1080) IPS touchscreen, 120Hz\",\"Intel Core Ultra 7 155H, Intel Arc GPU\",\"16GB LPDDR5 RAM\",\"512GB PCIe Gen 4 SSD\",\"Wi-Fi 7, Bluetooth 5.4\",\"Windows 11 Home\",\"53Whr battery, Cooler Boost HyperFlow\",\"Hall Effect triggers and sticks\"]",
                            Type = "MSI Claw"
                        });
                });

            modelBuilder.Entity("CheckoutAPI.Models.DeviceSpec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Spec")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceSpecs");
                });

            modelBuilder.Entity("CheckoutAPI.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("CheckoutAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CheckoutAPI.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Variant")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CheckoutAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CheckoutAPI.Models.DeviceSpec", b =>
                {
                    b.HasOne("CheckoutAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("CheckoutAPI.Models.Favorite", b =>
                {
                    b.HasOne("CheckoutAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CheckoutAPI.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CheckoutAPI.Models.Order", b =>
                {
                    b.HasOne("CheckoutAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CheckoutAPI.Models.OrderItem", b =>
                {
                    b.HasOne("CheckoutAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CheckoutAPI.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CheckoutAPI.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CheckoutAPI.Models.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
